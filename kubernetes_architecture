Kubernetes Architecture

# Kubernetes Architecture can divided into two parts one is controll plane or Master Node and Other is worker node

->  In Master node we have components like API Server, Scheduler, etcd, controller manager and cloud controller manager(ccm)
  ->  API Server is responsible for handling the API's talking to the end users.
  ->  Scheduler which is responsible for scheduling the resources on the Kubernetes cluster.
  ->  etcd stores entire cluster information and is stored as objects in kubernetes.
  ->  Controller Manager for eg., you've an application replica set or replication controller.Controller manager is that takes care of this default controller in Kubernetes.
  ->  Cloud Controller Manager let's say you want to implement to the Kubernetes on Amazon which has implemented Kubernetes as managed service on Eks platform. 
      So whenever you install this Kubernetes cluster, these cloud providers will do, So you create a service of type load balancer. 
      So which can spin up a load balancer IP address for you which is generated by cloud controller manager.

->  In Worker node we have components like kubelet, kube-proxy and Container runtime
  ->  kubelet manages the containers that are scheduled to run on that node.
      It ensures that containers are running and healthy, and that the resources they need are available.
      kubelet communicates with the API Server to get information about the containers that should be running on node and the starts and stops the container
      as needed to maintain the desired state. 
      It also monitors the containers to ensure that they are running correctly and restarts them if necassary.
      (In short, Kubelet is basically responsible for creation of the pods and ensures the pods are running, If it is not running it will take the necessary steps using
        control plane)
  ->  kube-proxy works by maintaining a set of network rules on each node on the cluster, which are updated dynamically as services are added or removed.
      when a client sends a request to service, the request is intercepted by kube_proxy  on the node where it was received.
      kube-proxy then looks up the destination endpoint for the service and routes the request accordingly.
      kube-proxy is essential component of k8s cluster as it ensures services can communicate with each other.  
  ->  Container runtime is responsible for running containers . 
      For ex, to run java application we need java runtime like this you can use any container runtime lke docker shim,cray.io etc.
